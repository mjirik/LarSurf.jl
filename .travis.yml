# Documentation: http://docs.travis-ci.com/user/languages/julia/
language: julia
os:
  - linux
  - osx
julia:
  - 1.1
  - nightly
matrix:
  allow_failures:
    - julia: nightly
  fast_finish: true
notifications:
  email: false
before_install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
    elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe -O miniconda.exe;
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
    # Useful for debugging any issues with conda
  - conda info -a
install:
  - conda create --yes -n travis -c mjirik -c conda-forge python=3 io3d
  - source activate travis
  - which julia
  - julia -e 'VERSION'
  # - conda list
  - python -m io3d.datasets -l 3Dircadb1.1 jatra_5mm nrn4
  - conda install --yes -c conda-forge pip numpy PyOpenGL
  - pip install pyplasm
  - julia -e 'using Pkg; Pkg.add(PackageSpec(url="https://github.com/cvdlab/LinearAlgebraicRepresentation.jl", rev="julia-1.0"))'
  - julia -e 'using Pkg; Pkg.add("PyCall"); ENV["PYTHON"] = read(`which python`, String)[1:end-1]; Pkg.build("PyCall")'
  - julia -e 'using Pkg; Pkg.add("Revise")'
  - julia -e 'using Pkg; Pkg.add("Plasm")'
after_success:
  - julia -e 'using Pkg; Pkg.add("Coverage"); using Coverage; Coveralls.submit(process_folder())'
